#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'

class ChordParser < Racc::Parser

module_eval(<<'...end chord_parser.ry.rb/module_eval...', 'chord_parser.ry.rb', 50)

R_SEPARATOR  = /\A\|/
R_SPACE      = /\A[ ]+/
R_BREAKLINE  = /\A(\r\n|\r|\n)/
R_CHORD      = /\A[A-Ga-g][b#]?[Mm769]*(\([#b\d]+\))?/
R_SOUNDS     = /\A{([0-9a-cn]{6})}/
R_TITLE      = /\A([^:\n\r]+):(\r\n|\r|\n)/

attr_reader :src
attr_reader :q

def initialize(obj)
  @src = obj.is_a?(IO) ? obj.read : obj.to_s
  @yydebug = ENV['YYDEBUG'] ? true : false
end

def parse
  piece = nil
  @s = StringScanner.new(src)
  @q = []

  until @s.eos?
    if (piece = @s.scan R_TITLE)
      m = piece.match(R_TITLE)
      @q << [:TITLE, m[1]]
    elsif(piece = @s.scan R_SEPARATOR)
      @q << [:SEPARATOR, piece]
    elsif (piece = @s.scan R_SPACE)
      @q << [:SPACE, piece]
    elsif (piece = @s.scan R_BREAKLINE)
      @q << [:BREAKLINE, piece]
    elsif (piece = @s.scan R_CHORD)
      @q << [:CHORD, piece]
    elsif (piece = @s.scan R_SOUNDS)
      m = piece.match(R_SOUNDS)
      @q << [:SOUNDS, m[1]]
    else
      raise "Error at #{@s.pos} \"#{src[@s.pos]}\""
    end
  end

  do_parse
end

def next_token
  @q.shift
end
...end chord_parser.ry.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
    -2,    -9,    -2,    13,     5,    -2,    -9,    -2,    26,    13,
    13,    29,    13,    14,    14,    13,    21,    22,   -13,   -13,
   -12,   -12,   -11,   -11,    12,     5,     6,    13,    13,    13,
    13 ]

racc_action_check = [
    18,    16,    11,    19,     0,    18,    16,    11,    19,     8,
    23,    23,    20,     8,    23,    15,    15,    15,    24,    24,
    25,    25,    10,    10,     6,     2,     1,    27,    28,    30,
    31 ]

racc_action_pointer = [
    -1,    26,    20,   nil,   nil,   nil,    24,   nil,     7,   nil,
    19,     0,   nil,   nil,   nil,    13,     1,   nil,    -2,     1,
    10,   nil,   nil,     8,    15,    17,   nil,    25,    26,   nil,
    27,    28 ]

racc_action_default = [
   -18,   -18,    -1,    -6,    -2,   -10,   -18,    -7,   -18,    -2,
    -2,   -14,    32,    -3,    -2,   -18,    -2,    -2,   -15,   -18,
   -16,    -2,    -2,   -18,    -2,    -2,    -2,    -4,    -8,    -2,
   -17,    -5 ]

racc_goto_table = [
    15,    18,    19,    16,    17,    20,    10,    23,     3,    19,
     7,     9,    27,    28,     2,    18,    18,    30,    24,    25,
    31,     1 ]

racc_goto_check = [
     3,    10,     3,     4,     6,     3,     9,     3,     5,     3,
     5,     8,     3,     3,     2,    10,    10,     3,     9,     9,
     3,     1 ]

racc_goto_pointer = [
   nil,    21,    14,    -9,    -6,     8,    -5,   nil,     7,     2,
    -9 ]

racc_goto_default = [
   nil,   nil,   nil,     8,   nil,   nil,   nil,     4,   nil,   nil,
    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 9, :_reduce_1,
  0, 11, :_reduce_none,
  2, 11, :_reduce_none,
  3, 12, :_reduce_none,
  4, 12, :_reduce_none,
  1, 10, :_reduce_6,
  2, 10, :_reduce_7,
  3, 14, :_reduce_none,
  3, 13, :_reduce_9,
  1, 15, :_reduce_10,
  1, 16, :_reduce_11,
  3, 16, :_reduce_12,
  3, 16, :_reduce_13,
  1, 17, :_reduce_14,
  2, 17, :_reduce_15,
  3, 18, :_reduce_16,
  4, 18, :_reduce_17 ]

racc_reduce_n = 18

racc_shift_n = 32

racc_token_table = {
  false => 0,
  :error => 1,
  :SPACE => 2,
  :BREAKLINE => 3,
  :SEPARATOR => 4,
  :TITLE => 5,
  :CHORD => 6,
  :SOUNDS => 7 }

racc_nt_base = 8

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SPACE",
  "BREAKLINE",
  "SEPARATOR",
  "TITLE",
  "CHORD",
  "SOUNDS",
  "$start",
  "body",
  "sections",
  "ws",
  "br",
  "section",
  "separator",
  "title",
  "measures",
  "chords",
  "chord" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'chord_parser.ry.rb', 5)
  def _reduce_1(val, _values)
     val[0] 
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'chord_parser.ry.rb', 14)
  def _reduce_6(val, _values)
     [ val[0] ]  
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 16)
  def _reduce_7(val, _values)
     val[0] << val[1] 
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'chord_parser.ry.rb', 21)
  def _reduce_9(val, _values)
     { title: val[0], measures: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 24)
  def _reduce_10(val, _values)
     val[0].strip 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 27)
  def _reduce_11(val, _values)
     [ val[0] ] 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 29)
  def _reduce_12(val, _values)
     val[0] << val[2]  
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 31)
  def _reduce_13(val, _values)
     val[0] << val[2]  
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 34)
  def _reduce_14(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 36)
  def _reduce_15(val, _values)
     val[0] << val[1] 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 39)
  def _reduce_16(val, _values)
     { name: val[1], sounds: nil } 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 41)
  def _reduce_17(val, _values)
     val[0][:sounds] = val[2]; val[0] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class ChordParser
