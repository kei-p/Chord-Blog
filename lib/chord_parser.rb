#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'

class ChordParser < Racc::Parser

module_eval(<<'...end chord_parser.ry.rb/module_eval...', 'chord_parser.ry.rb', 47)

R_SEPARATOR  = /\A\|/
R_SPACE      = /\A[\s]+/
R_BREAKLINE  = /\A[\r\n]+/
R_CHORD      = /\A([^|\n\r{}]+)(?:\{([0-9a-nx]{6})\})?/
# R_SOUNDS     = /\A{([0-9a-cn]{6})}/
R_TITLE      = /\A([^:\n\r]+):(\r\n|\r|\n)/

attr_reader :src
attr_reader :q

def initialize(obj)
  @src = obj.is_a?(IO) ? obj.read : obj.to_s + "\n"
  @yydebug = ENV['YYDEBUG'] ? true : false
end

def parse
  piece = nil
  @s = StringScanner.new(src)
  @q = []

  until @s.eos?
    if (piece = @s.scan R_TITLE)
      m = piece.match(R_TITLE)
      @q << [:TITLE, m[1].strip]
    elsif(piece = @s.scan R_SEPARATOR)
      @q << [:SEPARATOR, nil]
    elsif (piece = @s.scan R_BREAKLINE)
      @q << [:BREAKLINE, nil]
    elsif (piece = @s.scan R_SPACE)
    elsif (piece = @s.scan R_CHORD)
      m = piece.match(R_CHORD)
      @q << [:CHORD, m[1].strip]
      @q << [:SOUNDS, m[2]] if m[2]
    else
      raise "Error at #{@s.pos} \"#{src[@s.pos]}\""
    end
  end

  do_parse
end

def next_token
  @q.shift
end
...end chord_parser.ry.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
    19,     5,    11,    13,    14,    11,    12,    11,    18,    11,
    18,    11,     5,    11,     6 ]

racc_action_check = [
    15,     2,    15,     8,     8,     4,     6,     9,    10,    16,
    17,    20,     0,    21,     1 ]

racc_action_pointer = [
     8,    14,    -3,   nil,     0,   nil,     6,   nil,     1,     2,
     2,   nil,   nil,   nil,   nil,    -3,     4,     4,   nil,   nil,
     6,     8 ]

racc_action_default = [
   -16,   -16,    -1,    -2,   -16,    -8,   -16,    -3,   -16,    -9,
   -12,   -14,    22,    -4,    -5,    -7,   -16,   -13,   -15,    -6,
   -11,   -10 ]

racc_goto_table = [
     9,     3,    17,     7,     1,     8,    15,     2,    16,   nil,
   nil,    20,    21,    17,    17 ]

racc_goto_check = [
     8,     3,     9,     3,     1,     7,     5,     2,     4,   nil,
   nil,     8,     8,     9,     9 ]

racc_goto_pointer = [
   nil,     4,     7,     1,     0,    -2,   nil,     1,    -4,    -7 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,    10 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 8, :_reduce_1,
  1, 9, :_reduce_2,
  2, 9, :_reduce_3,
  1, 11, :_reduce_none,
  1, 12, :_reduce_none,
  2, 12, :_reduce_none,
  3, 10, :_reduce_7,
  1, 13, :_reduce_8,
  1, 14, :_reduce_9,
  3, 14, :_reduce_10,
  3, 14, :_reduce_11,
  1, 15, :_reduce_12,
  2, 15, :_reduce_13,
  1, 16, :_reduce_14,
  2, 16, :_reduce_15 ]

racc_reduce_n = 16

racc_shift_n = 22

racc_token_table = {
  false => 0,
  :error => 1,
  :SEPARATOR => 2,
  :BREAKLINE => 3,
  :TITLE => 4,
  :CHORD => 5,
  :SOUNDS => 6 }

racc_nt_base = 7

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEPARATOR",
  "BREAKLINE",
  "TITLE",
  "CHORD",
  "SOUNDS",
  "$start",
  "body",
  "sections",
  "section",
  "separator",
  "br",
  "title",
  "measures",
  "chords",
  "chord" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'chord_parser.ry.rb', 5)
  def _reduce_1(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 8)
  def _reduce_2(val, _values)
     [ val[0] ]  
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 10)
  def _reduce_3(val, _values)
     val[0] << val[1] 
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'chord_parser.ry.rb', 18)
  def _reduce_7(val, _values)
     { title: val[0], measures: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 21)
  def _reduce_8(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 24)
  def _reduce_9(val, _values)
     [ val[0] ] 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 26)
  def _reduce_10(val, _values)
     val[0] << val[2]  
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 28)
  def _reduce_11(val, _values)
     val[0] << val[2]  
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 31)
  def _reduce_12(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 33)
  def _reduce_13(val, _values)
     val[0] << val[1] 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 36)
  def _reduce_14(val, _values)
     { name: val[0], sounds: nil } 
  end
.,.,

module_eval(<<'.,.,', 'chord_parser.ry.rb', 38)
  def _reduce_15(val, _values)
     val[0][:sounds] = val[1]; val[0] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class ChordParser
